import telebot
import random
import string
import threading
from telebot import types
from googletrans import Translator

bot = telebot.TeleBot("7673436683:AAEGDgFvexxgDfFYuRnNA9pGOqLkHtjdewY")
translator = Translator()

# –°–æ—Å—Ç–æ—è–Ω–∏—è
secret_numbers = {}
waiting_for_timer = set()
waiting_for_translate = set()

# /start —Å –∫–Ω–æ–ø–∫–∞–º–∏
@bot.message_handler(commands=["start"])
def start(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("–°–∞–π—Ç üá¶üá≤", url="https://travel.yandex.ru/journal/armeniya-na-mashine-idealnyy-marshrut"),
        types.InlineKeyboardButton("–ò–≥—Ä–∞—Ç—å üé≤", callback_data="play_game"),
        types.InlineKeyboardButton("–¢–∞–π–º–µ—Ä ‚è±Ô∏è", callback_data="set_timer"),
        types.InlineKeyboardButton("–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ üí¨", callback_data="translator"),
        types.InlineKeyboardButton("–ü–∞—Ä–æ–ª—å üîê", callback_data="password")
    )
    bot.send_message(message.chat.id, f"–ë–∞—Ä–µ–≤ –î–µ–∑, {message.from_user.first_name}!", reply_markup=markup)

# –ò–≥—Ä–∞ "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ"
@bot.callback_query_handler(func=lambda call: call.data == "play_game")
def callback_game(call):
    secret_numbers[call.message.chat.id] = random.randint(1, 5)
    bot.send_message(call.message.chat.id, "–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ:")

@bot.message_handler(func=lambda message: message.chat.id in secret_numbers)
def guess(message):
    try:
        num = int(message.text)
        secret = secret_numbers[message.chat.id]
        if num == secret:
            bot.send_message(message.chat.id, "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –¢—ã —É–≥–∞–¥–∞–ª!")
            del secret_numbers[message.chat.id]
        else:
            bot.send_message(message.chat.id, "–ù–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")
    except:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.")

# –¢–∞–π–º–µ—Ä
@bot.callback_query_handler(func=lambda call: call.data == "set_timer")
def callback_timer(call):
    waiting_for_timer.add(call.message.chat.id)
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –¥–ª—è —Ç–∞–π–º–µ—Ä–∞:")

@bot.message_handler(func=lambda message: message.chat.id in waiting_for_timer)
def set_timer(message):
    try:
        minutes = int(message.text)
        if minutes <= 0:
            raise ValueError
        bot.send_message(message.chat.id, f"–¢–∞–π–º–µ—Ä –Ω–∞ {minutes} –º–∏–Ω—É—Ç –∑–∞–ø—É—â–µ–Ω!")
        waiting_for_timer.remove(message.chat.id)

        def reminder():
            bot.send_message(message.chat.id, f"–ü—Ä–æ—à–ª–æ {minutes} –º–∏–Ω—É—Ç!")

        threading.Timer(minutes * 60, reminder).start()
    except:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç.")

# –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫
@bot.callback_query_handler(func=lambda call: call.data == "translator")
def start_translation(call):
    waiting_for_translate.add(call.message.chat.id)
    bot.send_message(call.message.chat.id, "–ù–∞–ø–∏—à–∏ —Ñ—Ä–∞–∑—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –∏ —è –ø–µ—Ä–µ–≤–µ–¥—É –µ—ë –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π:")

@bot.message_handler(func=lambda message: message.chat.id in waiting_for_translate)
def translate(message):
    try:
        translated = translator.translate(message.text, src='ru', dest='en')
        bot.send_message(message.chat.id, f"–ü–µ—Ä–µ–≤–æ–¥: {translated.text}")
        waiting_for_translate.remove(message.chat.id)
    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {e}")

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª—è
@bot.callback_query_handler(func=lambda call: call.data == "password")
def generate_password(call):
    characters = string.ascii_letters + string.digits + string.punctuation
    password = ''.join(random.choices(characters, k=10))
    bot.send_message(call.message.chat.id, f"–¢–≤–æ–π –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:\n{password}", parse_mode="Markdown")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(non_stop=True)